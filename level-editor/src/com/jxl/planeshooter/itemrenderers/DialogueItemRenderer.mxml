<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				autoDrawBackground="false"
				currentState="hidden"
				creationComplete="init()">
	
	<fx:Script>
		<![CDATA[
			import com.jxl.planeshooter.constants.CharacterTypes;
			import com.jxl.planeshooter.constants.EmotionTypes;
			import com.jxl.planeshooter.vo.DialogueVO;
			
			import mx.collections.ArrayCollection;
			
			[Bindable]
			public var dialogue:DialogueVO;
			
			[Bindable]
			public var characters:ArrayCollection;
			
			[Bindable]
			public var emotions:ArrayCollection;
			
			private var fileRef:File;
			
			private function init():void
			{
				characters = new ArrayCollection();
				characters.addItem(CharacterTypes.JESTERXL);
				characters.addItem(CharacterTypes.BINDY);
				
				emotions = new ArrayCollection();
				emotions.addItem(EmotionTypes.NORMAL);
				emotions.addItem(EmotionTypes.MAD);
			}
			
			public override function set data(value:Object):void
			{
				super.data = value;
				
				dialogue = null;
				
				if(value && value is DialogueVO)
				{
					dialogue = value as DialogueVO;
					currentState = "dialogue";
				}
				else
				{
					currentState = "hidden";
				}
			}
			
			private function onChangeEmotion():void
			{
				dialogue.emotion = emotionComboBox.selectedItem;
			}
			
			private function onChangeCharacter():void
			{
				dialogue.characterName = characterComboBox.selectedItem;
			}
			
			private function onBrowseForAudio():void
			{
				if(fileRef == null)
				{
					fileRef = new File();
					fileRef.addEventListener(Event.SELECT, onAudioFileSelected);
				}
				fileRef.browseForOpen("Audio File", [new FileFilter("Wave", ".wave,.wav"), new FileFilter("mp3", ".mp3")]);
			}
			
			private function onAudioFileSelected(event:Event):void
			{
				dialogue.audioFile = fileRef.name;
			}
			
			private function onToggleAutoPlay():void
			{
				dialogue.autoPlay = autoPlayCheckBox.selected;
			}
			
			private function onChangeDialogueTime():void
			{
				dialogue.dialogueTime = dialogueTimeNumericStepper.value;
			}
			
			private function onChangeAdvanceOnAudioTime():void
			{
				dialogue.advanceOnAudioEnd = advanceOnAudioEndCheckBox.selected;
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="hidden" />
		<s:State name="dialogue" />
	</s:states>
	
	<s:Rect width="100%" height="100%">
		<s:fill>
			<s:SolidColor color="#EEEEEE" />
		</s:fill>
		<s:stroke>
			<s:SolidColorStroke color="#333333" />
		</s:stroke>
	</s:Rect>
	
	<s:Form>
		<s:layout>
			<s:FormLayout gap="-10" paddingBottom="1" paddingLeft="1" paddingRight="1" paddingTop="1" />
		</s:layout>
		
		<s:FormItem label="Character:">
			<s:ComboBox id="characterComboBox" dataProvider="{characters}" selectedItem="{dialogue.characterName}" change="onChangeCharacter()" />
		</s:FormItem>
		<s:FormItem label="Emotion:">
			<s:ComboBox id="emotionComboBox" dataProvider="{emotions}" selectedItem="{dialogue.emotion}" change="onChangeEmotion()" />
		</s:FormItem>
		<s:FormItem label="Message:">
			<mx:TextArea id="messageTextArea" text="{dialogue.message}" change="dialogue.message = messageTextArea.text" />
		</s:FormItem>
		<s:FormItem label="Audio File:">
			<s:TextInput id="audioFileTextInput" editable="false" text="{dialogue.audioFile}" />
			<s:Button label="Browse" click="onBrowseForAudio()" />
		</s:FormItem>
		<s:FormItem label="Auto Play:">
			<s:CheckBox id="autoPlayCheckBox" selected="{dialogue.autoPlay}" change="onToggleAutoPlay()" />
		</s:FormItem>
		<s:FormItem label="Dialogue Time:" enabled="{dialogue.advanceOnAudioEnd == false}">
			<s:NumericStepper id="dialogueTimeNumericStepper" minimum="0" maximum="10000" value="{dialogue.dialogueTime}" change="onChangeDialogueTime()" />
			<s:Label text="Seconds" />
		</s:FormItem>
		<s:FormItem label="Advance On Audio End:">
			<s:CheckBox id="advanceOnAudioEndCheckBox" selected="{dialogue.advanceOnAudioEnd}" change="onChangeAdvanceOnAudioTime()" />
		</s:FormItem>
	</s:Form>
	
</s:ItemRenderer>
